diff --git a/models/common.py b/models/common.py
index edb5edc..36dc41c 100644
--- a/models/common.py
+++ b/models/common.py
@@ -890,7 +890,7 @@ class autoShape(nn.Module):
         t = [time_synchronized()]
         p = next(self.model.parameters())  # for device and type
         if isinstance(imgs, torch.Tensor):  # torch
-            with amp.autocast(enabled=p.device.type != 'cpu'):
+            with torch.autocast("cuda", enabled=p.device.type != 'cpu'):
                 return self.model(imgs.to(p.device).type_as(p), augment, profile)  # inference
 
         # Pre-process
@@ -918,7 +918,7 @@ class autoShape(nn.Module):
         x = torch.from_numpy(x).to(p.device).type_as(p) / 255.  # uint8 to fp16/32
         t.append(time_synchronized())
 
-        with amp.autocast(enabled=p.device.type != 'cpu'):
+        with torch.autocast("cuda", enabled=p.device.type != 'cpu'):
             # Inference
             y = self.model(x, augment, profile)[0]  # forward
             t.append(time_synchronized())
diff --git a/models/experimental.py b/models/experimental.py
index 735d7aa..a81196c 100644
--- a/models/experimental.py
+++ b/models/experimental.py
@@ -249,7 +249,7 @@ def attempt_load(weights, map_location=None):
     model = Ensemble()
     for w in weights if isinstance(weights, list) else [weights]:
         attempt_download(w)
-        ckpt = torch.load(w, map_location=map_location)  # load
+        ckpt = torch.load(w, map_location=map_location, weights_only=False)  # load
         model.append(ckpt['ema' if ckpt.get('ema') else 'model'].float().fuse().eval())  # FP32 model
     
     # Compatibility updates
diff --git a/models/yolo.py b/models/yolo.py
index 95a019c..8267c33 100644
--- a/models/yolo.py
+++ b/models/yolo.py
@@ -42,16 +42,26 @@ class Detect(nn.Module):
     def forward(self, x):
         # x = x.copy()  # for profiling
         z = []  # inference output
-        self.training |= self.export
+
+        # use training = self.training | self.export instead of self.training |= self.export.
+        # because setting the module attribute self.training will cause error
+        # during export_for_training for int8 torch inductor backend:
+        # torch._dynamo.exc.Unsupported: setattr(UnspecializedNNModuleVariable(Detect), training, ...)
+        # See https://github.com/pytorch/pytorch/issues/101168.
+        # the change will not affect inference.
+        training = self.training | self.export
         for i in range(self.nl):
             x[i] = self.m[i](x[i])  # conv
             bs, _, ny, nx = x[i].shape  # x(bs,255,20,20) to x(bs,3,20,20,85)
             x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()
 
-            if not self.training:  # inference
+            # use training instead of self.training
+            if not training:  # inference
                 if self.grid[i].shape[2:4] != x[i].shape[2:4]:
                     self.grid[i] = self._make_grid(nx, ny).to(x[i].device)
-                y = x[i].sigmoid()
+                # here bf16 has a greater impact on accuracy
+                # use .float() for bf16 to improve accuracy without affecting performance
+                y = x[i].float().sigmoid() if x[i].dtype == torch.bfloat16 else x[i].sigmoid()
                 if not torch.onnx.is_in_onnx_export():
                     y[..., 0:2] = (y[..., 0:2] * 2. - 0.5 + self.grid[i]) * self.stride[i]  # xy
                     y[..., 2:4] = (y[..., 2:4] * 2) ** 2 * self.anchor_grid[i]  # wh
@@ -62,7 +72,8 @@ class Detect(nn.Module):
                     y = torch.cat((xy, wh, conf), 4)
                 z.append(y.view(bs, -1, self.no))
 
-        if self.training:
+        # use training instead of self.training
+        if training:
             out = x
         elif self.end2end:
             out = torch.cat(z, 1)
diff --git a/requirements.txt b/requirements.txt
index f4d2182..cf1cc75 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -8,8 +8,8 @@ Pillow>=7.1.2
 PyYAML>=5.3.1
 requests>=2.23.0
 scipy>=1.4.1
-torch>=1.7.0,!=1.12.0
-torchvision>=0.8.1,!=0.13.0
+# torch>=1.7.0,!=1.12.0
+# torchvision>=0.8.1,!=0.13.0
 tqdm>=4.41.0
 protobuf<4.21.3
 
diff --git a/train.py b/train.py
index 86c7e48..1754e35 100644
--- a/train.py
+++ b/train.py
@@ -357,7 +357,7 @@ def train(hyp, opt, device, tb_writer=None):
                     imgs = F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)
 
             # Forward
-            with amp.autocast(enabled=cuda):
+            with torch.autocast("cuda", enabled=cuda):
                 pred = model(imgs)  # forward
                 if 'loss_ota' not in hyp or hyp['loss_ota'] == 1:
                     loss, loss_items = compute_loss_ota(pred, targets.to(device), imgs)  # loss scaled by batch_size
diff --git a/train_aux.py b/train_aux.py
index 0e8053f..3cc199b 100644
--- a/train_aux.py
+++ b/train_aux.py
@@ -357,7 +357,7 @@ def train(hyp, opt, device, tb_writer=None):
                     imgs = F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)
 
             # Forward
-            with amp.autocast(enabled=cuda):
+            with torch.autocast("cuda", enabled=cuda):
                 pred = model(imgs)  # forward
                 loss, loss_items = compute_loss_ota(pred, targets.to(device), imgs)  # loss scaled by batch_size
                 if rank != -1:
diff --git a/utils/datasets.py b/utils/datasets.py
index 5fe4f7b..39c80f9 100644
--- a/utils/datasets.py
+++ b/utils/datasets.py
@@ -86,6 +86,7 @@ def create_dataloader(path, imgsz, batch_size, stride, opt, hyp=None, augment=Fa
                         batch_size=batch_size,
                         num_workers=nw,
                         sampler=sampler,
+                        drop_last=opt.drop_last,
                         pin_memory=True,
                         collate_fn=LoadImagesAndLabels.collate_fn4 if quad else LoadImagesAndLabels.collate_fn)
     return dataloader, dataset
@@ -389,7 +390,7 @@ class LoadImagesAndLabels(Dataset):  # for training/testing
         self.label_files = img2label_paths(self.img_files)  # labels
         cache_path = (p if p.is_file() else Path(self.label_files[0]).parent).with_suffix('.cache')  # cached labels
         if cache_path.is_file():
-            cache, exists = torch.load(cache_path), True  # load
+            cache, exists = torch.load(cache_path, weights_only=False), True  # load
             #if cache['hash'] != get_hash(self.label_files + self.img_files) or 'version' not in cache:  # changed
             #    cache, exists = self.cache_labels(cache_path, prefix), False  # re-cache
         else:
diff --git a/utils/torch_utils.py b/utils/torch_utils.py
index 1e631b5..6726dff 100644
--- a/utils/torch_utils.py
+++ b/utils/torch_utils.py
@@ -341,8 +341,8 @@ def revert_sync_batchnorm(module):
 
 
 class TracedModel(nn.Module):
-
-    def __init__(self, model=None, device=None, img_size=(640,640)): 
+    # Add torch JIT trace support for bfloat16 and float16 data types and use sample_input from outside
+    def __init__(self, model=None, device="cpu", img_size=(640,640), dtype=torch.float, sample_input=None):
         super(TracedModel, self).__init__()
         
         print(" Convert model to Traced-model... ") 
@@ -356,13 +356,15 @@ class TracedModel(nn.Module):
 
         self.detect_layer = self.model.model[-1]
         self.model.traced = True
-        
-        rand_example = torch.rand(1, 3, img_size, img_size)
-        
-        traced_script_module = torch.jit.trace(self.model, rand_example, strict=False)
-        #traced_script_module = torch.jit.script(self.model)
-        traced_script_module.save("traced_model.pt")
-        print(" traced_script_module saved! ")
+        if sample_input != None:
+            sample_input = sample_input.to(dtype)
+        else:
+            sample_input = torch.rand(1, 3, img_size, img_size)
+
+        with torch.autocast("cpu", enabled = dtype in [torch.bfloat16, torch.float16], dtype=dtype), torch.no_grad():
+            traced_script_module = torch.jit.trace(self.model, sample_input, strict=False).eval()
+            traced_script_module = torch.jit.freeze(traced_script_module)
+
         self.model = traced_script_module
         self.model.to(device)
         self.detect_layer.to(device)
